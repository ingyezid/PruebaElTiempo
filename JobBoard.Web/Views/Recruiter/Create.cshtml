@model JobBoard.Web.Models.ViewModels.Recruiter.JobOfferForm
@{
    ViewBag.Title = "Nueva oferta";
}

<div class="container py-4">
    <h1 class="h3 mb-4"><i class="fa-solid fa-plus me-2"></i>Nueva oferta</h1>

    @using (Ajax.BeginForm(
          "Create", "Recruiter",
          new AjaxOptions
          {
              HttpMethod = "POST",
              OnBegin = "crudBegin",
              OnSuccess = "crudSuccess",
              OnFailure = "crudFailure",
              OnComplete = "crudComplete"
          },
          new { id = "frmCreate", autocomplete = "off" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        @Html.Label("Título", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control w-100", maxlength = "120" })
                        @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.Label("Ubicación", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Location, new { @class = "form-control", maxlength = "120" })
                        @Html.ValidationMessageFor(m => m.Location, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-12">
                        @Html.Label("Descripción", new { @class = "form-label" })
                        @Html.TextAreaFor(m => m.Description, 6, 50, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-4">
                        @Html.Label("Salario (COP)", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Salary, "{0:0.##}", new { @class = "form-control", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(m => m.Salary, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        @Html.Label("Contrato", new { @class = "form-label" })
                        @Html.DropDownListFor(m => m.ContractType, Model.ContractTypeOptions, "Seleccione...", new { @class = "form-select" })
                        @Html.ValidationMessageFor(m => m.ContractType, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <div class="form-check">
                            @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input", id = "isAct" })
                            <label class="form-check-label" for="isAct">Oferta activa</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-footer d-flex gap-2">
            <button id="btnCreate" type="submit" class="btn btn-primary">
                <i class="fa-solid fa-floppy-disk me-2"></i>Guardar
            </button>
            <a class="btn btn-outline-secondary" href="@Url.Action("Index","Recruiter")">Cancelar</a>
        </div>
    }
</div>

@Html.Partial("~/Views/Shared/_AjaxToast.cshtml")

@section scripts{
    <script>
        function crudBegin() {
            var $form = $(this);
            if (!$form.data('validator')) $.validator.unobtrusive.parse($form);
            if (!$form.valid()) return false;

            $('#btnCreate').prop('disabled', true).append(' <span class="spinner-border spinner-border-sm"></span>');
        }
        function crudSuccess(res) {
            if (!res || !res.ok) {
                crudFailure(res); return;
            }
            showToast(res.message || 'Operación exitosa');
            setTimeout(function () {
                window.location = '@Url.Action("Index", "Recruiter")';
            }, 1000);
        }
        function crudFailure(err) {
            showToast('Hubo un problema al procesar la solicitud', true);
        }
        function crudComplete() {

            $('#btnCreate').prop('disabled', false).find('.spinner-border').remove();
        }
    </script>
}
